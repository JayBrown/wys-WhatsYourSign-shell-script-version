#!/bin/bash

# wys v0.95 beta
# shell script adaptation of Patrick Wardle's "WhatsYourSign" Finder extension (objective-see.com)
# gain WhatsYourSign functionality in other file managers than macOS Finder

process="What's Your Sign?"
account=$(id -un)

# round function
_round() {
	echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | /usr/bin/bc))
}


# notify function
_notify () {
 	if [[ "$tn_status" == "osa" ]] ; then
		osascript &>/dev/null << EOT
tell application "System Events"
	display notification "$2" with title "$process [" & "$account" & "]" subtitle "$1"
end tell
EOT
	elif [[ "$tn_status" == "tn-app-new" ]] || [[ "$tn_status" == "tn-app-old" ]] ; then
		"$tn_loc/Contents/MacOS/terminal-notifier" \
			-title "$process [$account]" \
			-subtitle "$1" \
			-message "$2" \
			-appIcon "$icon_loc" \
			>/dev/null
	elif [[ "$tn_status" == "tn-cli" ]] ; then
		"$tn" \
			-title "$process [$account]" \
			-subtitle "$1" \
			-message "$2" \
			-appIcon "$icon_loc" \
			>/dev/null
	fi
}

# look for terminal-notifier
tn=$(which terminal-notifier 2>/dev/null)
if [[ "$tn" == "" ]] || [[ "$tn" == *"not found" ]] ; then
	tn_loc=$(mdfind "kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | awk 'NR==1')
	if [[ "$tn_loc" == "" ]] ; then
		tn_loc=$(mdfind "kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | awk 'NR==1')
		if [[ "$tn_loc" == "" ]] ; then
			tn_status="osa"
		else
			tn_status="tn-app-old"
		fi
	else
		tn_status="tn-app-new"
	fi
else
	tn_vers=$("$tn" -help | head -1 | awk -F'[()]' '{print $2}' | awk -F. '{print $1"."$2}')
	if (( $(echo "$tn_vers >= 1.8" | bc -l) )) && (( $(echo "$tn_vers < 2.0" | bc -l) )) ; then
		tn_status="tn-cli"
	else
		tn_loc=$(mdfind "kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | awk 'NR==1')
		if [[ "$tn_loc" == "" ]] ; then
			tn_loc=$(mdfind "kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | awk 'NR==1')
			if [[ "$tn_loc" == "" ]] ; then
				tn_status="osa"
			else
				tn_status="tn-app-old"
			fi
		else
			tn_status="tn-app-new"
		fi
	fi
fi

for filepath in "$@"
do

unsigned=false
signauth=""
pkgu=false
warn=false

filename=$(basename "$filepath")
if ! [[ -r "$filepath" ]] ; then
	_notify "Not readable!" "$filename"
	continue
fi

extension="${filename##*.}"
[[ $extension =~ ^(pkg|mpkg|xip|xar)$ ]] && pkgu=true

tmploc="/tmp/$filename.wys"
ptmploc="/tmp/$filename.plist"
rm -f "$tmploc" 2>/dev/null
touch "$tmploc"

echo "$filename" >> "$tmploc"

homedir="$HOME"
shortpath="${filepath/#$HOME/~}"
echo -e "$shortpath\n" >> "$tmploc"

filetype=$(file "$filepath" | awk -F": " '{print $2}')

if [[ $filetype != "directory" ]] ; then
	bsize=$(stat -f%z "$filepath")
	mbsizeraw=$(bc -l <<< "scale=6; $bsize/1000000")
	mbsize=$(_round "$mbsizeraw" 2)
	if [[ "$mbsize" == "0.00" ]] ; then
		mbsize="< 0.01"
	fi
	mibsizeraw=$(bc -l <<< "scale=6; $bsize/1048576")
	mibsize=$(_round "$mibsizeraw" 2)
	if [[ "$mibsize" == "0.00" ]] ; then
		mibsize="< 0.01"
	fi
	echo -e "size:\t\t$bsize B [$mbsize MB | $mibsize MiB]\n" >> "$tmploc"
fi

echo -e "file type:\t$filetype" >> "$tmploc"

mdlsall=$(mdls "$filepath" 2>/dev/null)
itemtype=$(echo "$mdlsall" | awk -F"= " '/kMDItemKind/{print $2}' | sed 's/^"\(.*\)"$/\1/')
if [[ $itemtype == "" ]] ; then
	if [[ $filetype != "directory" ]] ; then
		echo -e "item type:\tn/a\n" >> "$tmploc"
	else
		pclass=$(defaults read "$filepath/Contents/Info.plist" NSPrincipalClass 2>/dev/null)
		if [[ $pclass == "" ]] ; then
			ptype=$(defaults read "$filepath/Contents/Info.plist" CFBundlePackageType 2>/dev/null)
			if [[ $ptype == "" ]] ; then
				echo -e "item type:\t$n/a\n" >> "$tmploc"
			else
				echo -e "package type:\t$ptype\n" >> "$tmploc"
			fi
		else
			echo -e "class:\t\t$pclass\n" >> "$tmploc"
		fi
	fi
else
	echo -e "item type:\t$itemtype\n" >> "$tmploc"
fi

if ! $pkgu ; then

	csign=$(codesign -dvvvv --entitlements - "$filepath" 2>&1)

	if [[ $(echo "$csign" | grep "is not signed at all") != "" ]] ; then
		unsigned=true
		if [[ $filetype != "directory" ]] ; then
			executable="$filepath"
			executablename=$(basename "$executable")
		else
			executablename=$(defaults read "$filepath/Contents/Info.plist" CFBundleExecutable 2>/dev/null)
			if [[ $executablename == "" ]] ; then
				executable=""
			else
				executable="$filepath/Contents/MacOS/$executablename"
			fi
		fi
	else
		executable=$(echo "$csign" | awk -F= '/Executable/{print $2}')
		if [[ $executable == "" ]] && [[ $filetype == "directory" ]] ; then
			executablename=$(defaults read "$filepath/Contents/Info.plist" CFBundleExecutable 2>/dev/null)
			if [[ $executablename == "" ]] ; then
				executable=""
			else
				executable="$filepath/Contents/MacOS/$executablename"
			fi
		else
			executablename=$(basename "$executable")
		fi
	fi

	if [[ $executable != "" ]] ; then
		bsize=$(stat -f%z "$executable")
		mbsizeraw=$(bc -l <<< "scale=6; $bsize/1000000")
		mbsize=$(_round "$mbsizeraw" 2)
		if [[ "$mbsize" == "0.00" ]] ; then
			mbsize="< 0.01"
		fi
		mibsizeraw=$(bc -l <<< "scale=6; $bsize/1048576")
		mibsize=$(_round "$mibsizeraw" 2)
		if [[ "$mibsize" == "0.00" ]] ; then
			mibsize="< 0.01"
		fi
		[ $bsize -gt 50000000 ] && _notify "Please wait! Hashing..." "$executablename"
		md5hash=$(md5 -q "$executable")
		echo -e "hashes:\t\tmd5:\t$md5hash" >> "$tmploc"
		sha1hash=$(shasum -a 1 "$executable" | awk '{print $1}')
		echo -e "\t\tsha1:\t$sha1hash" >> "$tmploc"
		sha2hash=$(shasum -a 256 "$executable" | awk '{print $1}')
		echo -e "\t\tsha256:\t$sha2hash\n" >> "$tmploc"
	else
		echo -e "hashes:\t\tn/a\n" >> "$tmploc"
	fi

	spctlall=$(spctl -v --assess "$filepath" 2>&1)
	assess=$(echo "$spctlall" | grep ": " | awk -F": " '{print $2}')
	echo -e "assessment:\t$assess" >> "$tmploc"

	asource=$(echo "$spctlall" | grep "source=" | awk -F= '{print $2}')
	if [[ $asource == "" ]] ; then
		asource=$(spctl -a -t open --context context:primary-signature -v "$filepath" 2>&1 | awk -F"=" '/source=/{print $2}')
		[[ $asource == "" ]] && asource="n/a"
	fi
	echo -e "source:\t\t$asource\n" >> "$tmploc"

	if ! $unsigned ; then

		if [[ $(echo "$csign" | grep "Signature=") != "" ]] ; then
			signature=$(echo "$csign" | grep "^Signature=" | awk -F= '{print $2}')
			[[ $signature == "" ]] && signature="n/a"
			identifier=$(echo "$csign" | grep "^Identifier=" | awk -F= '{print $2}')
			[[ $identifier == "" ]] && identifier="n/a"
			teamid=$(echo "$csign" | grep "TeamIdentifier=" | awk -F= '{print $2}')
			echo -e "sign:\t\t$signature ($identifier)" >> "$tmploc"
		else
			cscs=$(echo "$csign" | grep "Authority=" | awk -F= '{print $2}')
			count=1
			while read -r cert
			do
				if [[ $count == 1 ]] ; then
					echo -e "sign auth:\t$cert" >> "$tmploc"
					leafcert="$cert"
				else
					echo -e "\t\t$cert" >> "$tmploc"
				fi
				(( count++ ))
			done < <(echo "$cscs")
			teamid=$(echo "$csign" | grep "TeamIdentifier=" | awk -F= '{print $2}')
		fi

		timestamp=$(echo "$csign" | grep "Timestamp=" | awk -F= '{print $2}')
		[[ $timestamp == "" ]] && timestamp=$(echo "$csign" | grep "Signed Time=" | awk -F= '{print $2}')
		[[ $timestamp == "" ]] && timestamp="n/a"
		echo -e "\ntimestamp:\t$timestamp\n" >> "$tmploc"

		csignc=$(echo "$csign" | LANG=C LC_CTYPE=C sed 's/^.*\<\?xml/\<\?xml/g' | grep "<.*>")
		echo "$csignc" > "$ptmploc"
		enthr=$(plutil -p "$ptmploc" | grep -v "^{" | grep -v "^}" | sed -e 's/^[ \t]*//' | grep -v "^$")
		if [[ $enthr != "" ]] ; then
			count=1
			while read -r ent
			do
				if [[ $count == 1 ]] ; then
					echo -e "entitlements:\t$ent" >> "$tmploc"
				else
					echo -e "\t\t$ent" >> "$tmploc"
				fi
				(( count++ ))
			done < <(echo "$enthr")
		else
			echo -e "entitlements:\tnone" >> "$tmploc"
		fi

	else
		echo -e "sign auth:\tunsigned" >> "$tmploc"
	fi

	if [[ $filetype == "directory" ]] && [[ $executable != "" ]] ; then
		xfunsigned="unsigned files with executable permissions:"
		xfothersign="executable files with other code signatures:"
		cd "$filepath"
		execfiles=$(find -L . -type f -perm +111 -print | sed 's/^\.//g' | grep -v "/Contents/MacOS/$executablename" | sort)
		cd /
		while read -r execfile
		do
			execfilepath="$filepath$execfile"
			execinfo=$(file "$execfilepath" | awk -F": " '{print $2}')
			[[ $(echo "$execinfo" | grep 'executable\|Mach-O\|script\|i386\|x86_64\|shell') == "" ]] && continue
			xfcsign=$(codesign -dvv "$execfilepath" 2>&1)
			if [[ $(echo "$xfcsign" | grep "is not signed at all") != "" ]] ; then
				xfunsigned="$xfunsigned\n.$execfile"
			else
				xfleafcert=$(echo "$xfcsign" | grep "Authority=" | awk -F= '{print $2}' | head -1)
				xfteamid=$(echo "$xfcsign" | grep "TeamIdentifier=" | awk -F= '{print $2}')
				if [[ $xfleafcert != $leafcert ]] || [[ $xfteamid != $teamid ]] ; then
					xfothersign="$xfothersign\n$xfleafcert:\t.$execfile"
				fi
			fi
		done < <(echo "$execfiles")
		if [[ $(echo -e "$xfothersign" | wc -l | xargs) != "1" ]] ; then
			echo -e "\n$xfothersign" >> "$tmploc"
		else
			echo -e "\n$xfothersign\nnone" >> "$tmploc"
		fi
		if [[ $(echo -e "$xfunsigned" | wc -l | xargs) != "1" ]] ; then
			echo -e "\n$xfunsigned" >> "$tmploc"
		else
			echo -e "\n$xfunsigned\nnone" >> "$tmploc"
		fi
	fi

else

	pkginfo=$(pkgutil --check-signature "$filepath")

	pkgstat=$(echo "$pkginfo" | awk -F": " '/Status:/{print $2}')
	[[ $pkgstat == "" ]] && pkgstat=""
	echo -e "status:\t\t$pkgstat" >> "$tmploc"

	pkgheader=$(xar --dump-toc=/dev/stdout -f "$filepath")

	cusers=$(echo "$pkgheader" | grep "<user>" | awk -F">" '{print $2}' | awk -F"</" '{print $1}' | grep -v "^$" | sort -u)
	if [[ $cusers == "" ]] ; then
		echo -e "creator:\tn/a" >> "$tmploc"
	else
		count=1
		while read -r cuser
		do
			if [[ $count == 1 ]] ; then
				echo -e "creator:\t$cuser" >> "$tmploc"
			else
				echo -e "\t\t$cuser" >> "$tmploc"
			fi
			(( count++ ))
		done < <(echo "$cusers")
	fi

	[ $bsize -gt 50000000 ] && _notify "Please wait! Hashing..." "$filename"
	md5hash=$(md5 -q "$filepath")
	echo -e "\nhashes:\t\tmd5:\t$md5hash" >> "$tmploc"
	sha1hash=$(shasum -a 1 "$filepath" | awk '{print $1}')
	echo -e "\t\tsha1:\t$sha1hash" >> "$tmploc"
	sha2hash=$(shasum -a 256 "$filepath" | awk '{print $1}')
	echo -e "\t\tsha256:\t$sha2hash\n" >> "$tmploc"

	pkgsig=$(echo "$pkginfo" | sed -n -e '/Certificate Chain:/,$p' | grep "^.*[0-9]\." | awk -F. '{print substr($0, index($0,$2))}' | sed -e 's/^[ \t]*//' | grep -v "^$")
	if [[ $pkgsig == "" ]] ; then
		echo -e "sign auth:\tunsigned" >> "$tmploc"
	else
		count=1
		while read -r cert
		do
			if [[ $count == 1 ]] ; then
				echo -e "sign auth:\t$cert" >> "$tmploc"
			else
				echo -e "\t\t$cert" >> "$tmploc"
			fi
			(( count++ ))
		done < <(echo "$pkgsig")
	fi

	timestamp=$(echo "$pkgheader" | grep "<creation-time>" | awk -F">" '{print $2}' | awk -F"</" '{print $1}' | grep -v "^$")
	if [[ $timestamp == "" ]] ; then
		hrtimestamp="n/a"
	else
		hrtimestamp=$(date -f '%FT%T' -j "$timestamp" +'%d %b %Y %H:%M:%S' | sed -e 's/^[ \t]*//')
	fi
	echo -e "\ntimestamp:\t$hrtimestamp\n" >> "$tmploc"

fi

qlmanage -p "$tmploc" >/dev/null && rm -f "$tmploc" "$ptmploc" 2>/dev/null

done
exit
